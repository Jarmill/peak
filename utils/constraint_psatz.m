function [p_out, cons, coeff_list] = constraint_psatz(p, X, vars, d)
%CONSTRAINT_PSATZ Want to ensure that p >= 0 on region X
%   Use Putinar Positivestellensatz to ensure nonnegativity
%
%Input:
%   p:      A polynomial that should be nonnegative on a region
%   X:      Region of nonnegativity
%   vars:   variables of polynomial
%   d:      degree of polynomial (after multiplication by constraint)
%
%Output:
%   p_out:      New Psatz expression
%   cons:       constraitns generated by this psatz expression
%   coeff_list: list of coefficients as decision variables

%deal with monomial structure of equality constraints later
%this just needs to work.

p_out = p;
coeff_list = [];
cons_mult = [];

%equalities
for i = 1:length(X.eq)
    [seq, ceq] = polynomial(vars, d - degree(X.eq(i)));
    
    p_out = p_out - seq * X.eq(i);    
    coeff_list = [coeff_list; ceq];    
end

%inequalities
for i = 1:length(X.ineq)
    [sineq, cineq] = polynomial(vars, d - degree(X.ineq(i)));
    
    p_out = p_out - sineq * X.ineq(i);
    coeff_list = [coeff_list; cineq];
    cons_mult = [cons_mult; sos(sineq)];
end

%the bug was here, replace p with p_out
cons = [sos(p_out); cons_mult];
end

